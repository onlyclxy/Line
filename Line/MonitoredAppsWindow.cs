using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Line
{
    public partial class MonitoredAppsWindow : Form
    {
        private DataGridView dataGridView;
        private Button addButton;
        private Button deleteButton;
        private Button windowPickerButton;
        private Button saveButton;
        private Button cancelButton;
        
        public List<LineForm.MonitoredApp> MonitoredApps { get; private set; }
        public bool DialogResultOK { get; private set; }
        
        // Windows API for window detection and global mouse hooks
        [DllImport("user32.dll")]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

        [DllImport("user32.dll")]
        private static extern IntPtr WindowFromPoint(Point point);

        [DllImport("user32.dll")]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

        [DllImport("user32.dll")]
        private static extern IntPtr SetCapture(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool ReleaseCapture();

        [DllImport("user32.dll")]
        private static extern IntPtr GetCapture();

        [DllImport("user32.dll")]
        private static extern bool SetCursorPos(int x, int y);

        [DllImport("user32.dll")]
        private static extern bool GetCursorPos(out Point lpPoint);

        [DllImport("user32.dll")]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelMouseProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll")]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll")]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        private const int WH_MOUSE_LL = 14;
        private const int WM_LBUTTONDOWN = 0x0201;
        private const int WM_LBUTTONUP = 0x0202;
        private const int WM_MOUSEMOVE = 0x0200;

        private delegate IntPtr LowLevelMouseProc(int nCode, IntPtr wParam, IntPtr lParam);

        [StructLayout(LayoutKind.Sequential)]
        private struct RECT
        {
            public int Left;
            public int Top;
            public int Right;
            public int Bottom;
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct POINT
        {
            public int x;
            public int y;
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MSLLHOOKSTRUCT
        {
            public POINT pt;
            public uint mouseData;
            public uint flags;
            public uint time;
            public IntPtr dwExtraInfo;
        }

        // Window picker state
        private bool isPickingWindow = false;
        private bool isDragging = false;
        private Cursor originalCursor;
        private IntPtr hookID = IntPtr.Zero;
        private LowLevelMouseProc hookProc;

        public MonitoredAppsWindow(List<LineForm.MonitoredApp> currentApps)
        {
            InitializeComponent();
            
            // Ê∑±Êã∑Ë¥ùÂΩìÂâçÂ∫îÁî®Á®ãÂ∫èÂàóË°®
            MonitoredApps = new List<LineForm.MonitoredApp>();
            foreach (var app in currentApps)
            {
                MonitoredApps.Add(new LineForm.MonitoredApp(app.Name, app.IsEnabled));
            }
            
            SetupDataGridView();
            RefreshDataGridView();
            
            // ÂàùÂßãÂåñÈº†Ê†áÈí©Â≠êÂõûË∞É
            hookProc = HookCallback;
        }

        private void InitializeComponent()
        {
            this.Text = "ÁÆ°ÁêÜÁõëÊéßÁ®ãÂ∫è";
            this.Size = new Size(600, 450);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            
            // ÂàõÂª∫DataGridView
            dataGridView = new DataGridView
            {
                Location = new Point(12, 12),
                Size = new Size(560, 320),
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                AllowUserToResizeRows = false,
                RowHeadersVisible = false,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                MultiSelect = false,
                ReadOnly = false
            };
            
            // ÂàõÂª∫ÊåâÈíÆ
            addButton = new Button
            {
                Text = "Ê∑ªÂä†Á®ãÂ∫è",
                Location = new Point(12, 340),
                Size = new Size(80, 30)
            };
            addButton.Click += AddButton_Click;
            
            deleteButton = new Button
            {
                Text = "Âà†Èô§ÈÄâ‰∏≠",
                Location = new Point(100, 340),
                Size = new Size(80, 30)
            };
            deleteButton.Click += DeleteButton_Click;
            
            windowPickerButton = new Button
            {
                Text = "üéØ ÊãñÊãΩÊãæÂèñ",
                Location = new Point(188, 340),
                Size = new Size(90, 30),
            };
            windowPickerButton.MouseDown += WindowPickerButton_MouseDown;
            
            saveButton = new Button
            {
                Text = "‰øùÂ≠ò",
                Location = new Point(412, 380),
                Size = new Size(75, 30)
            };
            saveButton.Click += SaveButton_Click;
            
            cancelButton = new Button
            {
                Text = "ÂèñÊ∂à",
                Location = new Point(497, 380),
                Size = new Size(75, 30)
            };
            cancelButton.Click += CancelButton_Click;
            
            // Ê∑ªÂä†Êéß‰ª∂Âà∞Á™ó‰Ωì
            this.Controls.Add(dataGridView);
            this.Controls.Add(addButton);
            this.Controls.Add(deleteButton);
            this.Controls.Add(windowPickerButton);
            this.Controls.Add(saveButton);
            this.Controls.Add(cancelButton);
        }
        
        private void SetupDataGridView()
        {
            // Ê∑ªÂä†Âàó
            var nameColumn = new DataGridViewTextBoxColumn
            {
                Name = "Name",
                HeaderText = "Á®ãÂ∫èÊ†áÈ¢ò",
                DataPropertyName = "Name",
                Width = 460,
                ReadOnly = true
            };
            
            var enabledColumn = new DataGridViewCheckBoxColumn
            {
                Name = "IsEnabled",
                HeaderText = "ÂêØÁî®",
                DataPropertyName = "IsEnabled",
                Width = 80
            };
            
            dataGridView.Columns.Add(nameColumn);
            dataGridView.Columns.Add(enabledColumn);
            
            // Á¶ÅÁî®Ëá™Âä®Ë∞ÉÊï¥ÂàóÂÆΩ
            dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
            
            // Ê∑ªÂä†ÂçïÂÖÉÊ†ºÂÄºÂèòÂåñ‰∫ã‰ª∂Â§ÑÁêÜ
            dataGridView.CellValueChanged += DataGridView_CellValueChanged;
            dataGridView.CurrentCellDirtyStateChanged += DataGridView_CurrentCellDirtyStateChanged;
        }
        
        private void DataGridView_CurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            // ÂΩìÂ§çÈÄâÊ°ÜÁä∂ÊÄÅÊîπÂèòÊó∂Á´ãÂç≥Êèê‰∫§Êõ¥Êîπ
            if (dataGridView.IsCurrentCellDirty)
            {
                dataGridView.CommitEdit(DataGridViewDataErrorContexts.Commit);
            }
        }
        
        private void DataGridView_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            // ÂΩìÂçïÂÖÉÊ†ºÂÄºÂèëÁîüÂèòÂåñÊó∂ÔºåÂêåÊ≠•Âà∞Êàë‰ª¨ÁöÑÊï∞ÊçÆÂàóË°®
            if (e.RowIndex >= 0 && e.RowIndex < MonitoredApps.Count && e.ColumnIndex == 1) // IsEnabled Âàó
            {
                var cell = dataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex];
                if (cell.Value is bool enabled)
                {
                    MonitoredApps[e.RowIndex].IsEnabled = enabled;
                }
            }
        }
        
        private void RefreshDataGridView()
        {
            dataGridView.DataSource = null;
            dataGridView.DataSource = MonitoredApps;
            
            // ÈáçÊñ∞ËÆæÁΩÆÂàóÂÆΩÔºåÁ°Æ‰øù‰∏ç‰ºöË¢´ÈáçÁΩÆ
            if (dataGridView.Columns.Count > 0)
            {
                dataGridView.Columns[0].Width = 460; // Á®ãÂ∫èÊ†áÈ¢òÂàó
                if (dataGridView.Columns.Count > 1)
                {
                    dataGridView.Columns[1].Width = 80; // ÂêØÁî®Âàó
                }
            }
            
            // Á°Æ‰øùÁ¶ÅÁî®Ëá™Âä®Ë∞ÉÊï¥ÂàóÂÆΩ
            dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
        }

        private void AddButton_Click(object sender, EventArgs e)
        {
            using (var inputForm = new InputForm("Ê∑ªÂä†ÁõëÊéßÁ®ãÂ∫è", "ËØ∑ËæìÂÖ•Ë¶ÅÁõëÊéßÁöÑÁ®ãÂ∫èÁ™óÂè£Ê†áÈ¢òÔºö"))
            {
                if (inputForm.ShowDialog() == DialogResult.OK)
                {
                    string appName = inputForm.InputText.Trim();
                    if (!string.IsNullOrWhiteSpace(appName))
                    {
                        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
                        if (!MonitoredApps.Any(a => a.Name.Equals(appName, StringComparison.OrdinalIgnoreCase)))
                        {
                            MonitoredApps.Add(new LineForm.MonitoredApp(appName, true));
                            RefreshDataGridView();
                        }
                        else
                        {
                            MessageBox.Show("ËØ•Á®ãÂ∫èÂ∑≤Âú®ÂàóË°®‰∏≠ÔºÅ", "ÊèêÁ§∫", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
            }
        }

        private void DeleteButton_Click(object sender, EventArgs e)
        {
            if (dataGridView.SelectedRows.Count > 0)
            {
                int selectedIndex = dataGridView.SelectedRows[0].Index;
                if (selectedIndex >= 0 && selectedIndex < MonitoredApps.Count)
                {
                    var selectedApp = MonitoredApps[selectedIndex];
                    var result = MessageBox.Show($"Á°ÆÂÆöË¶ÅÂà†Èô§ \"{selectedApp.Name}\" ÂêóÔºü", 
                        "Á°ÆËÆ§Âà†Èô§", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    
                    if (result == DialogResult.Yes)
                    {
                        MonitoredApps.RemoveAt(selectedIndex);
                        RefreshDataGridView();
                    }
                }
            }
            else
            {
                MessageBox.Show("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÁ®ãÂ∫èÔºÅ", "ÊèêÁ§∫", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void WindowPickerButton_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                StartWindowPicking();
            }
        }

        private void StartWindowPicking()
        {
            isPickingWindow = true;
            isDragging = false;
            originalCursor = this.Cursor;
            
            // ËÆæÁΩÆÂÖ®Â±ÄÈº†Ê†áÈí©Â≠ê
            hookID = SetWindowsHookEx(WH_MOUSE_LL, hookProc, GetModuleHandle("user32"), 0);
            
            // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
            windowPickerButton.Text = "ÊùæÂºÄËé∑Âèñ";
            windowPickerButton.BackColor = Color.LightCoral;
            
            // ËÆæÁΩÆÂçÅÂ≠óÂÖâÊ†á
            Cursor.Current = Cursors.Cross;
            
            // Áõ¥Êé•ÂºÄÂßãÊãñÊãΩÔºåÊó†ÈúÄÂºπÁ™óÊèêÁ§∫
            isDragging = true;
        }

        private void StopWindowPicking()
        {
            isPickingWindow = false;
            isDragging = false;
            
            // ÁßªÈô§ÂÖ®Â±ÄÈº†Ê†áÈí©Â≠ê
            if (hookID != IntPtr.Zero)
            {
                UnhookWindowsHookEx(hookID);
                hookID = IntPtr.Zero;
            }
            
            // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
            windowPickerButton.Text = "üéØ ÊãñÊãΩÊãæÂèñ";
            windowPickerButton.BackColor = SystemColors.Control;
            
            // ÊÅ¢Â§çÂÖâÊ†á
            Cursor.Current = Cursors.Default;
        }

        private IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && isPickingWindow)
            {
                int msgType = wParam.ToInt32();
                
                if (msgType == WM_LBUTTONDOWN)
                {
                    // ÂºÄÂßãÊãñÊãΩ
                    isDragging = true;
                    Cursor.Current = Cursors.Cross;
                }
                else if (msgType == WM_LBUTTONUP && isDragging)
                {
                    // ÁªìÊùüÊãñÊãΩÔºåËé∑ÂèñÁ™óÂè£‰ø°ÊÅØ
                    isDragging = false;
                    
                    MSLLHOOKSTRUCT hookStruct = (MSLLHOOKSTRUCT)Marshal.PtrToStructure(lParam, typeof(MSLLHOOKSTRUCT));
                    Point mousePoint = new Point(hookStruct.pt.x, hookStruct.pt.y);
                    
                    // Ëé∑ÂèñÈº†Ê†á‰ΩçÁΩÆÁöÑÁ™óÂè£
                    IntPtr targetWindow = WindowFromPoint(mousePoint);
                    
                    if (targetWindow != IntPtr.Zero && targetWindow != this.Handle)
                    {
                        // Ëé∑ÂèñÁ™óÂè£Ê†áÈ¢ò
                        StringBuilder windowTitle = new StringBuilder(256);
                        GetWindowText(targetWindow, windowTitle, windowTitle.Capacity);
                        string title = windowTitle.ToString();
                        
                        // ÂÅúÊ≠¢ÊãæÂèñÊ®°Âºè
                        this.Invoke(new Action(() => {
                            StopWindowPicking();
                            ProcessCapturedWindow(title);
                        }));
                    }
                    else
                    {
                        this.Invoke(new Action(() => {
                            StopWindowPicking();
                        }));
                    }
                }
                else if (msgType == WM_MOUSEMOVE && isDragging)
                {
                    // Âú®ÊãñÊãΩËøáÁ®ã‰∏≠‰øùÊåÅÂçÅÂ≠óÂÖâÊ†á
                    Cursor.Current = Cursors.Cross;
                }
            }
            
            return CallNextHookEx(hookID, nCode, wParam, lParam);
        }

        private void ProcessCapturedWindow(string title)
        {
            if (!string.IsNullOrWhiteSpace(title))
            {
                // ËØ¢ÈóÆÁî®Êà∑ÊòØÂê¶Ê∑ªÂä†
                var result = MessageBox.Show($"Ê£ÄÊµãÂà∞Á™óÂè£Ê†áÈ¢òÔºö\n\n\"{title}\"\n\nÊòØÂê¶Ê∑ªÂä†Âà∞ÁõëÊéßÂàóË°®Ôºü", 
                    "Á°ÆËÆ§Ê∑ªÂä†", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                
                if (result == DialogResult.Yes)
                {
                    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
                    if (!MonitoredApps.Any(a => a.Name.Equals(title, StringComparison.OrdinalIgnoreCase)))
                    {
                        MonitoredApps.Add(new LineForm.MonitoredApp(title, true));
                        RefreshDataGridView();
                        MessageBox.Show("Â∑≤ÊàêÂäüÊ∑ªÂä†Âà∞ÁõëÊéßÂàóË°®ÔºÅ", "Ê∑ªÂä†ÊàêÂäü", 
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show("ËØ•Á®ãÂ∫èÂ∑≤Âú®ÂàóË°®‰∏≠ÔºÅ", "ÊèêÁ§∫", 
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            else
            {
                MessageBox.Show("Êó†Ê≥ïËé∑ÂèñÁ™óÂè£Ê†áÈ¢òÔºåËØ∑ÈáçËØï„ÄÇ", "Ëé∑ÂèñÂ§±Ë¥•", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            // Á°Æ‰øùÊâÄÊúâÁºñËæëÈÉΩË¢´Êèê‰∫§
            dataGridView.EndEdit();
            
            // ÊâãÂä®ÂêåÊ≠•ÊâÄÊúâÊï∞ÊçÆÔºåÁ°Æ‰øùÊ≤°ÊúâÈÅóÊºè
            for (int i = 0; i < dataGridView.Rows.Count && i < MonitoredApps.Count; i++)
            {
                var enabledCell = dataGridView.Rows[i].Cells["IsEnabled"];
                if (enabledCell.Value is bool enabled)
                {
                    MonitoredApps[i].IsEnabled = enabled;
                }
            }
            
            DialogResultOK = true;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void CancelButton_Click(object sender, EventArgs e)
        {
            DialogResultOK = false;
            this.Close();
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            if (isPickingWindow)
            {
                StopWindowPicking();
            }
            base.OnFormClosing(e);
        }
    }

    // ÁÆÄÂçïÁöÑËæìÂÖ•ÂØπËØùÊ°Ü
    public partial class InputForm : Form
    {
        private Label label;
        private TextBox textBox;
        private Button okButton;
        private Button cancelButton;
        
        public string InputText { get; private set; } = "";

        public InputForm(string title, string prompt)
        {
            InitializeComponent(title, prompt);
        }

        private void InitializeComponent(string title, string prompt)
        {
            this.Text = title;
            this.Size = new Size(400, 150);
            this.StartPosition = FormStartPosition.CenterParent;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;

            label = new Label
            {
                Text = prompt,
                Location = new Point(12, 15),
                Size = new Size(360, 20)
            };

            textBox = new TextBox
            {
                Location = new Point(12, 40),
                Size = new Size(360, 25)
            };

            okButton = new Button
            {
                Text = "Á°ÆÂÆö",
                Location = new Point(217, 75),
                Size = new Size(75, 25),
                DialogResult = DialogResult.OK
            };
            okButton.Click += (s, e) => { InputText = textBox.Text; };

            cancelButton = new Button
            {
                Text = "ÂèñÊ∂à",
                Location = new Point(297, 75),
                Size = new Size(75, 25),
                DialogResult = DialogResult.Cancel
            };

            this.Controls.Add(label);
            this.Controls.Add(textBox);
            this.Controls.Add(okButton);
            this.Controls.Add(cancelButton);
            
            this.AcceptButton = okButton;
            this.CancelButton = cancelButton;
            
            // ËÆæÁΩÆÁÑ¶ÁÇπÂà∞ÊñáÊú¨Ê°Ü
            this.Load += (s, e) => textBox.Focus();
        }
    }
} 